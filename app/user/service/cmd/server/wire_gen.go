// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/nextzeus/kratos-shop/app/user/service/internal/biz"
	"github.com/nextzeus/kratos-shop/app/user/service/internal/conf"
	"github.com/nextzeus/kratos-shop/app/user/service/internal/data"
	"github.com/nextzeus/kratos-shop/app/user/service/internal/server"
	"github.com/nextzeus/kratos-shop/app/user/service/internal/service"
	"go.opentelemetry.io/otel/sdk/trace"
)

// Injectors from wire.go:

// initApp init kratos application.
// wire injector
// 通过 wire 自动生成一个完整的 initApp 函数, 在 wire_gen.go
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, auth *conf.Auth, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	client := data.NewEntClient(confData, logger)
	cmdable := data.NewRedisCmd(confData, logger)
	dataData, cleanup, err := data.NewData(client, cmdable, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	cardRepo := data.NewCardRepo(dataData, logger)
	cardUseCase := biz.NewCardUseCase(cardRepo, logger)
	addressRepo := data.NewAddressRepo(dataData, logger)
	addressUseCase := biz.NewAddressUseCase(addressRepo, logger)
	userService := service.NewUserService(userUseCase, cardUseCase, addressUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, userService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
